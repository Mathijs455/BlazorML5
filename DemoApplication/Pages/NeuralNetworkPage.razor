@page "/neuralnet"
@using ML5
@inject IJSRuntime Runtime
@inject HttpClient Http

<div>
    <h2 style="color:forestgreen">Neural Network</h2><br />
    <h5>Titanic Dataset Example</h5>
    <br />
    <br />
</div>
<div>
    <center>
            <div class="card" style="width: 38rem;">
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        Gender
                        <select class="form-control">
                            <option value="male" selected>male</option>
                            <option value="female">female</option>
                        </select>
                    </li>
                    <li class="list-group-item">
                        Fare Class
                        <select class="form-control">
                            <option value="first" selected>first</option>
                            <option value="second">second</option>
                            <option value="third">third</option>
                        </select>
                    </li>
                    <li class="list-group-item">
                        Age  (Yrs)
                        <form onsubmit="return false;">
                            <input type="number" min="01" max="100" class="form-control">
                        </form>

                    </li>
                    <li class="list-group-item">
                        Fare
                        <form onsubmit="return false;">
                            <input type="number" min="0" max="300" class="form-control">
                        </form>
                    </li>
                </ul>
            </div>

    </center>
</div>



@if (dataset != null)
{
    <p style="color:black;font-size:medium">Training DataSet Size : @dataset.Length</p>
    <p style="color:black;font-size:medium">Dataset is bit small, train for longer time</p>

}

@code {

    int r = 150, g = 10, b = 0;

    bool trained = false;
    string Result;
    NeuralNetwork network;
    Data[] dataset;
    protected override Task OnInitializedAsync()
    {
        NeuralNetworkOptions option = new NeuralNetworkOptions()
        {
            inputs = 4,
            outputs = 1,
            task = NetworkTask.classification,
            debug = true
        };
        network = new NeuralNetwork(Runtime, option);
        network.OnClassification += OnClassify;
        network.OnTrainingComplete += OnTrained;
        Loaddata();
        return base.OnInitializedAsync();
    }

    void classify()
    {
    }

    async void Loaddata()
    {
        dataset = await Http.GetFromJsonAsync<Data[]>("data/titanic.json");
        foreach (var data in dataset)
        {
            network.AddData(new object[] { data.age, data.fare, data.fare_class,data.sex }, new object[] { data.survived });
        }
        network.NormalizeData();

        Console.WriteLine("Added Dataset of size : " + dataset.Length);

        StartTrain();
    }
    void OnTrained()
    {
        trained = true;
        StateHasChanged();
    }

    void StartTrain()
    {
        TrainingOptions options = new TrainingOptions()
        {
            epochs = 10,
            batchSize = 32
        };
        network.Train(options);
    }


    void OnClassify(string error, CResult[] results)
    {
        Result = results[0].label;
        StateHasChanged();
    }

    void Save()
    {
        network.Save();
    }
    class Data
    {
        public string survived { get; set; }
        public string fare_class { get; set; }
        public string sex { get; set; }
        public int age { get; set; }
        public int fare { get; set; }
    }

    public enum fare_class
    {
        first,second,third
    }
}
