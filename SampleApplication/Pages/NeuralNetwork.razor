@page "/NeuralNetwork"
@inject IJSRuntime Runtime
@inject HttpClient Http

@using ML5;
@using System.IO;


<button>@version</button>

@code
{
    string version { get; set; }
    ML5.NeuralNetwork nn;
    protected override Task OnInitializedAsync()
    {
        nn = new ML5.NeuralNetwork(Runtime,new NeuralNetworkOptions()
        {
            task=NetworkTask.regression,debug=true,epochs=32,inputs=2,outputs=1
        });

        for (int i = 1; i <= 10; i++)
        {
            for (int j = 1; j <= 10; j++)
            {
                nn.AddData(new object[] {i,j}, new object[] {i*j});
            }

            //nn.NormalizeData();
        }


        nn.OnTrainingComplete += () => {
            Console.WriteLine("Completed");
            nn.OnPredict += Predict;
            nn.Predict(new object[] { 5, 3 } );
        };
        nn.NormalizeData();
        nn.Train();

        return base.OnInitializedAsync();
    }
    async void Predict(string err, Result[] results)
    {
        Console.WriteLine(results[0].label);
        foreach(var layer in await nn.Layers)
        {
            var v=await layer.GetWeights();
            Console.Write(v.ToString());
        }
    }
}
