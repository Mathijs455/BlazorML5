@page "/NeuralNetwork"
@inject IJSRuntime Runtime
@inject HttpClient Http

@using ML5;
@using System.IO;


@*<button>@version</button>

@code
{
    string version { get; set; }
    protected override Task OnInitializedAsync()
    {
        ML5.NeuralNetwork nn = new ML5.NeuralNetwork(Runtime,new NeuralNetworkOptions()
        {
            task=NetworkTask.regression,debug=true,epochs=32
        });
        float[] input = new float[100];
        float[] output = new float[100];
        for (int i = 0; i < 100; i++)
        {
            input[i] = i / 100.0f;
            if (i < 50)
            {
                output[i] = 0;
            }
            else
                output[i] = 1;
            nn.AddData(input[i], output[i]);


        }
        nn.OnTrainingComplete += () => {
            Console.WriteLine("Completed");
            nn.OnPredict += Predict;
            nn.Predict(0.05);
        };
        nn.Train();

        return base.OnInitializedAsync();
    }
    void Predict(string err, Result[] results)
    {
        Console.WriteLine(results[0].label);
    }
}*@

<!--<div>
        <h2 style="color:forestgreen">Color Classification</h2><br />
        <h5>Create A Color With Sliders</h5>
    </div>
    <div>
        <center>
            <input type="range" min=0 max=255 @bind-value="@R" id="red"/>
            <input type="range" min=0 max=255 @bind-value="@G" id="green" />
            <input type="range" min=0 max=255 @bind-value="@B" id="blue"/>
            <br /><br />
            <div id="box"></div><br /><br />
            <br />
            <p>It seems a bit </p>
            <p style="font-weight:bolder">@output</p>
            <br />
            <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
            <button type="button" class="btn btn-warning" @onclick="LoadDataSet">Re-Train</button>
        </center>
    </div>
    <style>
        #green {
            -webkit-appearance: none;
            background-color: springgreen;
            height: 8px;
            overflow: visible;
            width: 33%;
            position: relative;
            outline:none;
            border-radius: 3px;
        }

        #red {
            -webkit-appearance: none;
            background-color: deeppink;
            height: 8px;
            overflow: visible;
            width: 33%;
            outline:none;
            position: relative;
            border-radius: 3px;
        }

        #blue {
            -webkit-appearance: none;
            background-color: dodgerblue;
            height: 8px;
            overflow: visible;
            width: 33%;
            outline: none;
            position: relative;
            border-radius: 3px;
        }

        #box {
            background-color: rgb(@r,@g,@b);
            width: 200px;
            height: 200px;
            display: inline-block;
            border-color:black;
            border-width:thick;
            border-style:solid;
        }


        input[type='range']::-webkit-slider-thumb {
            -webkit-appearance: none;
            background-color: deepskyblue;
            box-shadow: 1px 1px 8px pink;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            position: relative;
            z-index: 100;
        }

            input[type='range']::-webkit-slider-thumb:before {
                content: '';
                position: absolute;
                top: 100%;
                left: 40%;
                width: 10%;
                height: 200px;
                display: block;
                background: red;
                z-index: -10;
                box-shadow: 0 0 10px darkred;
                opacity: .1;
            }

        input[type='range']:hover::-webkit-slider-thumb:before {
            opacity: 1;
        }

        .slice {
            width: 50px;
            max-height: 10px;
            height: 10px;
            position: relative;
            top: -15px;
            padding-top: 20px;
            overflow: visible;
        }

        .thing {
            border-radius: 50%;
            background: yellow;
            border: 1px solid black;
            width: 70px;
            height: 70px;
            position: relative;
        }

            .thing:before, .thing:after {
                content: '';
                height: 10px;
                width: 10px;
                border-radius: 50%;
                top: 15px;
                left: 15px;
                background: black;
                display: block;
                position: absolute;
            }

            .thing:after {
                left: auto;
                right: 15px;
            }

        .slice:hover .thing {
            background: red;
        }

        .thing:hover {
            background: yellow !important;
        }

        .slice:hover .thing:before {
            left: 10px;
        }


        .slice:hover .thing:after {
            right: 10px;
        }

        .thing, .thing:before, .thing:after {
            -webkit-transition: all 0.5s ease;
            -moz-transition: all 0.5s ease;
            transition: all 0.5s ease;
        }

            .thing:hover:before {
                left: 15px !important;
            }


            .thing:hover:after {
                right: 15px !important;
            }

    </style>
    @code
    {
        int R
        {
            get
            {
                return r;
            }
            set
            {
                r = value;
                updatePredict();
            }
        }
        int G
        {
            get
            {
                return g;
            }
            set
            {
                g = value;
                updatePredict();
            }
        }
        int B
        {
            get
            {
                return b;
            }
            set
            {
                b = value;
                updatePredict();
            }
        }
        int r = 150, g = 10, b = 0;
        string output = "";
        ML5.NeuralNetwork net;
        protected override void OnInitialized()
        {
            NeuralNetworkOptions option = new NeuralNetworkOptions()
            {
                task = NetworkTask.classification,
                debug = true

            };

            net = new ML5.NeuralNetwork(Runtime, option);
            net.OnModelLoaded += ProcessModel;
            net.OnClassification += OnClassify;
            net.OnTrainingComplete += Classify;
            net.OnLoad += () =>
            {
                //updatePredict();
                net.Print("Loaded Model Data ie. Wts and Bias ");
            };
            net.OnSave += () => { net.Print("Saved Model Data ie. Wts and Bias"); };

            //LoadModel();
        }


        void ProcessModel()
        {
            net.Print("Model Loaded");
            //net.NormalizeData();
            net.Train(new TrainingOptions() { epochs = 64, batchSize = 32 });
        }
        void Classify()
        {
            net.Classify(new int[] { r, g, b });

        }
        void OnClassify(string err, CResult[] result)
        {
            if(err==null)
                Console.WriteLine("Error:" + err);
            output = result[0].label;
            StateHasChanged();

        }
        void updatePredict()
        {
            Classify();
        }

        void LoadModel()
        {

            net.Load("data/color_model/model.json");
        }
        private async void LoadDataSet()
        {
            DataSet[] datasets = await Http.GetJsonAsync<DataSet[]>("data/colorData.json");
            foreach (var item in datasets)
            {
                net.AddData(new Dictionary<string,short> { { "r",item.r }, { "g",item.g }, { "b",item.b } }, new Dictionary<string,string> { {"label", item.label } });
            }
            ProcessModel();
            net.Print("Data set Added of length : "+datasets.Length);
        }
        private void Train()
        {
            net.Train();
        }
        private void Save()
        {
            net.Save();
        }
        class DataSet
        {
            public short b { get; set; }
            public short r { get; set; }
            public short g { get; set; }
            public string label { get; set; }


        }
    }-->